type token =
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)
  | ABS
  | TILDA
  | NOT
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | REM
  | CONJ
  | DISJ
  | EQ
  | GT
  | LT
  | LP
  | RP
  | IF
  | THEN
  | ELSE
  | FI
  | COMMA
  | PROJ
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "a3.mly"
    open A1
# 33 "a3.ml"
let yytransl_const = [|
  260 (* ABS *);
  261 (* TILDA *);
  262 (* NOT *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIV *);
  267 (* REM *);
  268 (* CONJ *);
  269 (* DISJ *);
  270 (* EQ *);
  271 (* GT *);
  272 (* LT *);
  273 (* LP *);
  274 (* RP *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  278 (* FI *);
  279 (* COMMA *);
  280 (* PROJ *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\003\000\003\000\004\000\004\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\006\000\006\000\006\000\007\000\007\000\008\000\008\000\009\000\
\009\000\010\000\010\000\011\000\011\000\012\000\012\000\013\000\
\013\000\014\000\014\000\014\000\015\000\015\000\016\000\016\000\
\016\000\016\000\000\000"

let yylen = "\002\000\
\002\000\001\000\003\000\001\000\003\000\001\000\002\000\001\000\
\003\000\003\000\003\000\004\000\004\000\004\000\004\000\001\000\
\003\000\003\000\001\000\003\000\001\000\003\000\001\000\003\000\
\001\000\002\000\001\000\002\000\001\000\007\000\001\000\007\000\
\001\000\002\000\003\000\001\000\003\000\003\000\001\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\040\000\041\000\039\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\000\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\025\000\027\000\029\000\031\000\
\033\000\036\000\026\000\028\000\000\000\034\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\000\000\035\000\
\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\000\037\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\030\000\032\000"

let yydgoto = "\002\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\032\000\026\000"

let yysindex = "\255\255\
\053\255\000\000\000\000\000\000\000\000\117\255\117\255\093\255\
\005\255\053\255\243\254\000\000\005\000\001\255\000\000\011\255\
\008\255\017\255\030\255\028\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\255\000\000\250\254\252\254\
\021\255\046\255\053\255\000\000\053\255\029\255\059\255\087\255\
\093\255\093\255\093\255\093\255\093\255\000\000\053\255\000\000\
\053\255\053\255\026\255\001\255\000\000\093\255\093\255\008\255\
\093\255\008\255\093\255\008\255\017\255\017\255\030\255\028\255\
\000\000\000\000\000\000\044\255\049\255\008\255\008\255\008\255\
\008\255\053\255\033\255\052\255\106\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\241\000\229\000\000\000\211\000\
\115\000\069\000\035\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\223\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\235\000\000\000\000\000\000\000\127\000\
\000\000\139\000\000\000\151\000\086\000\103\000\052\000\018\000\
\000\000\000\000\000\000\000\000\000\000\163\000\175\000\187\000\
\199\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\249\255\000\000\031\000\034\000\060\000\093\000\235\255\032\000\
\036\000\037\000\030\000\002\000\000\000\000\000\000\000\000\000"

let yytablesize = 520
let yytable = "\001\000\
\023\000\031\000\033\000\034\000\036\000\003\000\004\000\005\000\
\006\000\007\000\008\000\046\000\037\000\048\000\041\000\042\000\
\047\000\022\000\049\000\061\000\062\000\009\000\030\000\010\000\
\038\000\039\000\040\000\043\000\011\000\003\000\004\000\005\000\
\006\000\007\000\021\000\027\000\028\000\045\000\044\000\066\000\
\050\000\067\000\068\000\054\000\055\000\009\000\051\000\010\000\
\069\000\075\000\077\000\020\000\011\000\003\000\004\000\005\000\
\006\000\007\000\008\000\003\000\004\000\005\000\006\000\007\000\
\074\000\052\000\076\000\029\000\019\000\009\000\053\000\010\000\
\057\000\078\000\063\000\009\000\011\000\010\000\079\000\064\000\
\000\000\065\000\011\000\000\000\000\000\018\000\000\000\003\000\
\004\000\005\000\006\000\007\000\000\000\003\000\004\000\005\000\
\006\000\007\000\000\000\000\000\059\000\000\000\017\000\009\000\
\000\000\010\000\003\000\004\000\005\000\009\000\011\000\010\000\
\000\000\000\000\016\000\000\000\011\000\003\000\004\000\005\000\
\000\000\007\000\009\000\000\000\010\000\000\000\009\000\000\000\
\000\000\011\000\056\000\058\000\060\000\009\000\000\000\010\000\
\000\000\000\000\011\000\000\000\011\000\000\000\000\000\000\000\
\000\000\000\000\070\000\071\000\000\000\072\000\010\000\073\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\
\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\
\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\023\000\023\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\035\000\023\000\000\000\023\000\023\000\023\000\023\000\
\022\000\022\000\022\000\000\000\022\000\022\000\022\000\022\000\
\022\000\022\000\000\000\022\000\000\000\022\000\022\000\022\000\
\022\000\021\000\021\000\000\000\000\000\021\000\021\000\021\000\
\021\000\021\000\021\000\000\000\021\000\000\000\021\000\021\000\
\021\000\021\000\020\000\020\000\000\000\000\000\020\000\020\000\
\020\000\020\000\020\000\020\000\000\000\020\000\000\000\020\000\
\020\000\020\000\020\000\019\000\019\000\000\000\000\000\000\000\
\019\000\019\000\019\000\019\000\019\000\000\000\019\000\000\000\
\019\000\019\000\019\000\019\000\018\000\018\000\000\000\000\000\
\000\000\018\000\018\000\018\000\018\000\018\000\000\000\018\000\
\000\000\018\000\018\000\018\000\018\000\017\000\017\000\000\000\
\000\000\000\000\017\000\017\000\017\000\017\000\017\000\000\000\
\017\000\000\000\017\000\017\000\017\000\017\000\016\000\016\000\
\016\000\016\000\016\000\000\000\016\000\000\000\016\000\016\000\
\016\000\016\000\009\000\009\000\009\000\009\000\009\000\000\000\
\009\000\000\000\009\000\009\000\009\000\009\000\011\000\011\000\
\011\000\011\000\011\000\000\000\011\000\000\000\011\000\011\000\
\011\000\011\000\010\000\010\000\010\000\010\000\010\000\000\000\
\010\000\000\000\010\000\010\000\010\000\010\000\015\000\015\000\
\015\000\015\000\015\000\000\000\015\000\000\000\015\000\015\000\
\015\000\015\000\013\000\013\000\013\000\013\000\013\000\000\000\
\013\000\000\000\013\000\013\000\013\000\013\000\014\000\014\000\
\014\000\014\000\014\000\000\000\014\000\000\000\014\000\014\000\
\014\000\014\000\012\000\012\000\012\000\012\000\012\000\000\000\
\012\000\000\000\012\000\012\000\012\000\012\000\008\000\008\000\
\000\000\000\000\000\000\000\000\008\000\000\000\008\000\008\000\
\008\000\008\000\007\000\007\000\000\000\000\000\000\000\000\000\
\007\000\004\000\007\000\007\000\007\000\007\000\004\000\003\000\
\004\000\004\000\004\000\004\000\003\000\000\000\003\000\003\000\
\003\000\003\000\002\000\000\000\002\000\002\000\002\000\002\000"

let yycheck = "\001\000\
\000\000\009\000\010\000\017\001\000\000\001\001\002\001\003\001\
\004\001\005\001\006\001\018\001\012\001\018\001\007\001\008\001\
\023\001\000\000\023\001\041\000\042\000\017\001\018\001\019\001\
\014\001\015\001\016\001\011\001\024\001\001\001\002\001\003\001\
\004\001\005\001\000\000\006\000\007\000\010\001\009\001\047\000\
\020\001\049\000\050\000\015\001\016\001\017\001\001\001\019\001\
\023\001\001\001\018\001\000\000\024\001\001\001\002\001\003\001\
\004\001\005\001\006\001\001\001\002\001\003\001\004\001\005\001\
\021\001\035\000\074\000\008\000\000\000\017\001\037\000\019\001\
\014\001\022\001\043\000\017\001\024\001\019\001\077\000\044\000\
\255\255\045\000\024\001\255\255\255\255\000\000\255\255\001\001\
\002\001\003\001\004\001\005\001\255\255\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\014\001\255\255\000\000\017\001\
\255\255\019\001\001\001\002\001\003\001\017\001\024\001\019\001\
\255\255\255\255\000\000\255\255\024\001\001\001\002\001\003\001\
\255\255\005\001\017\001\255\255\019\001\255\255\000\000\255\255\
\255\255\024\001\038\000\039\000\040\000\017\001\255\255\019\001\
\255\255\255\255\000\000\255\255\024\001\255\255\255\255\255\255\
\255\255\255\255\054\000\055\000\255\255\057\000\000\000\059\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\013\001\018\001\255\255\020\001\021\001\022\001\023\001\
\007\001\008\001\009\001\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\255\255\018\001\255\255\020\001\021\001\022\001\
\023\001\007\001\008\001\255\255\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\007\001\008\001\255\255\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\255\255\018\001\255\255\020\001\
\021\001\022\001\023\001\007\001\008\001\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\255\255\
\020\001\021\001\022\001\023\001\007\001\008\001\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\255\255\020\001\021\001\022\001\023\001\007\001\008\001\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\255\255\020\001\021\001\022\001\023\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\255\255\020\001\021\001\022\001\023\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\255\255\020\001\021\001\022\001\023\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\255\255\020\001\021\001\022\001\023\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\255\255\020\001\021\001\022\001\023\001\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\012\001\013\001\255\255\255\255\255\255\255\255\
\018\001\013\001\020\001\021\001\022\001\023\001\018\001\013\001\
\020\001\021\001\022\001\023\001\018\001\255\255\020\001\021\001\
\022\001\023\001\018\001\255\255\020\001\021\001\022\001\023\001"

let yynames_const = "\
  ABS\000\
  TILDA\000\
  NOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  REM\000\
  CONJ\000\
  DISJ\000\
  EQ\000\
  GT\000\
  LT\000\
  LP\000\
  RP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  COMMA\000\
  PROJ\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'disj_expression) in
    Obj.repr(
# 26 "a3.mly"
                                                 ( _1 )
# 298 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'disj_expression) in
    Obj.repr(
# 27 "a3.mly"
                                                 ( _1 )
# 305 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'disj_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conj_expression) in
    Obj.repr(
# 31 "a3.mly"
                                                 ( Disjunction(_1,_3) )
# 313 "a3.ml"
               : 'disj_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conj_expression) in
    Obj.repr(
# 32 "a3.mly"
                                                 ( _1 )
# 320 "a3.ml"
               : 'disj_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'conj_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'not_expression) in
    Obj.repr(
# 36 "a3.mly"
                                               ( Conjunction(_1,_3) )
# 328 "a3.ml"
               : 'conj_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'not_expression) in
    Obj.repr(
# 37 "a3.mly"
                                               ( _1 )
# 335 "a3.ml"
               : 'conj_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'compare_expression) in
    Obj.repr(
# 42 "a3.mly"
                                                   ( Not(_2))
# 342 "a3.ml"
               : 'not_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compare_expression) in
    Obj.repr(
# 43 "a3.mly"
                                                   ( _1 )
# 349 "a3.ml"
               : 'not_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'compare_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'minus_expression) in
    Obj.repr(
# 47 "a3.mly"
                                                    ( Equals(_1,_3))
# 357 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'compare_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'minus_expression) in
    Obj.repr(
# 48 "a3.mly"
                                                    ( LessT(_1,_3) )
# 365 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'compare_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'minus_expression) in
    Obj.repr(
# 49 "a3.mly"
                                                    ( GreaterT(_1,_3))
# 373 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'compare_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'minus_expression) in
    Obj.repr(
# 50 "a3.mly"
                                                    ( LessTE(_1,_4))
# 381 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'compare_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'minus_expression) in
    Obj.repr(
# 51 "a3.mly"
                                                    ( LessTE(_1,_4))
# 389 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'compare_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'minus_expression) in
    Obj.repr(
# 52 "a3.mly"
                                                    ( GreaterTE(_1,_4))
# 397 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'compare_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'minus_expression) in
    Obj.repr(
# 53 "a3.mly"
                                                    ( GreaterTE(_1,_4))
# 405 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'minus_expression) in
    Obj.repr(
# 54 "a3.mly"
                                                    ( _1 )
# 412 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'minus_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expression) in
    Obj.repr(
# 58 "a3.mly"
                                                ( Sub(_1,_3) )
# 420 "a3.ml"
               : 'minus_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'minus_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expression) in
    Obj.repr(
# 59 "a3.mly"
                                                ( Add(_1,_3) )
# 428 "a3.ml"
               : 'minus_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expression) in
    Obj.repr(
# 60 "a3.mly"
                                                ( _1 )
# 435 "a3.ml"
               : 'minus_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rem_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expression) in
    Obj.repr(
# 64 "a3.mly"
                                               ( Rem(_1,_3) )
# 443 "a3.ml"
               : 'rem_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expression) in
    Obj.repr(
# 65 "a3.mly"
                                                 ( _1 )
# 450 "a3.ml"
               : 'rem_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'div_expression) in
    Obj.repr(
# 69 "a3.mly"
                                                ( Mult(_1,_3) )
# 458 "a3.ml"
               : 'mult_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'div_expression) in
    Obj.repr(
# 70 "a3.mly"
                                                ( _1 )
# 465 "a3.ml"
               : 'mult_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'div_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expression) in
    Obj.repr(
# 74 "a3.mly"
                                                ( Div(_1,_3) )
# 473 "a3.ml"
               : 'div_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expression) in
    Obj.repr(
# 75 "a3.mly"
                                                ( _1 )
# 480 "a3.ml"
               : 'div_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'neg_expression) in
    Obj.repr(
# 79 "a3.mly"
                                                ( Abs(_2))
# 487 "a3.ml"
               : 'abs_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neg_expression) in
    Obj.repr(
# 80 "a3.mly"
                                                ( _1 )
# 494 "a3.ml"
               : 'abs_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'neg_expression) in
    Obj.repr(
# 84 "a3.mly"
                                               ( Negative(_2))
# 501 "a3.ml"
               : 'neg_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expression) in
    Obj.repr(
# 85 "a3.mly"
                                               ( _1 )
# 508 "a3.ml"
               : 'neg_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : A1.exptree) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : A1.exptree) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : A1.exptree) in
    Obj.repr(
# 89 "a3.mly"
                                               ( IfThenElse(_2,_4,_6))
# 517 "a3.ml"
               : 'ifte_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proj_expression) in
    Obj.repr(
# 90 "a3.mly"
                                               ( _1 )
# 524 "a3.ml"
               : 'ifte_expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expression) in
    Obj.repr(
# 94 "a3.mly"
                                               ( Project((_3,_5) , _7) )
# 533 "a3.ml"
               : 'proj_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_expression) in
    Obj.repr(
# 95 "a3.mly"
                                                ( _1 )
# 540 "a3.ml"
               : 'proj_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "a3.mly"
                                                (Tuple(0,[]))
# 546 "a3.ml"
               : 'tuple_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comma_expression) in
    Obj.repr(
# 100 "a3.mly"
                                                (Tuple(List.length (_2),_2))
# 553 "a3.ml"
               : 'tuple_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 101 "a3.mly"
                                                ( _1 )
# 560 "a3.ml"
               : 'tuple_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A1.exptree) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A1.exptree) in
    Obj.repr(
# 105 "a3.mly"
                                                (_1::[_3] )
# 568 "a3.ml"
               : 'comma_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comma_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A1.exptree) in
    Obj.repr(
# 106 "a3.mly"
                                                (_1@[_3])
# 576 "a3.ml"
               : 'comma_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "a3.mly"
                                                ( Var(_1) )
# 583 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 111 "a3.mly"
                                                ( N(_1) )
# 590 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 112 "a3.mly"
                                                ( B(_1))
# 597 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : A1.exptree) in
    Obj.repr(
# 113 "a3.mly"
                                                ( InParen(_2) )
# 604 "a3.ml"
               : 'constant))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : A1.exptree)
