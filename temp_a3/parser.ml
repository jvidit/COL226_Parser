type token =
  | LP
  | RP
  | PLUS
  | MUL
  | EOL
  | EOF
  | DIV
  | MOD
  | SUB
  | ABS
  | NEG
  | TRUE
  | FALSE
  | AND
  | OR
  | NOT
  | INT of (int)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
    open Expression
    exception EOF
# 27 "parser.ml"
let yytransl_const = [|
  257 (* LP *);
  258 (* RP *);
  259 (* PLUS *);
  260 (* MUL *);
  261 (* EOL *);
    0 (* EOF *);
  262 (* DIV *);
  263 (* MOD *);
  264 (* SUB *);
  265 (* ABS *);
  266 (* NEG *);
  267 (* TRUE *);
  268 (* FALSE *);
  269 (* AND *);
  270 (* OR *);
  271 (* NOT *);
    0|]

let yytransl_block = [|
  272 (* INT *);
  273 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\003\000\003\000\004\000\004\000\
\005\000\005\000\006\000\006\000\008\000\008\000\009\000\009\000\
\007\000\007\000\007\000\000\000"

let yylen = "\002\000\
\002\000\001\000\003\000\001\000\003\000\001\000\003\000\001\000\
\003\000\001\000\003\000\001\000\002\000\001\000\002\000\001\000\
\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\002\000\000\000\000\000\018\000\017\000\
\020\000\000\000\000\000\000\000\000\000\000\000\016\000\012\000\
\014\000\000\000\013\000\015\000\000\000\001\000\000\000\000\000\
\000\000\000\000\019\000\000\000\000\000\000\000\000\000\011\000"

let yydgoto = "\002\000\
\009\000\010\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000"

let yysindex = "\002\000\
\001\000\000\000\001\255\000\000\005\255\007\255\000\000\000\000\
\000\000\055\255\004\255\026\255\003\255\054\255\000\000\000\000\
\000\000\041\255\000\000\000\000\001\255\000\000\001\255\001\255\
\001\255\007\255\000\000\004\255\026\255\003\255\054\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\255\011\255\037\255\023\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\255\048\255\044\255\030\255\000\000"

let yygindex = "\000\000\
\000\000\034\000\038\000\039\000\040\000\041\000\250\255\000\000\
\058\000"

let yytablesize = 274
let yytable = "\020\000\
\004\000\003\000\001\000\004\000\004\000\003\000\004\000\003\000\
\025\000\005\000\006\000\023\000\006\000\006\000\006\000\006\000\
\007\000\008\000\006\000\032\000\007\000\008\000\007\000\008\000\
\010\000\010\000\010\000\010\000\010\000\024\000\010\000\009\000\
\009\000\009\000\009\000\009\000\018\000\009\000\008\000\008\000\
\008\000\008\000\027\000\021\000\008\000\007\000\007\000\007\000\
\007\000\005\000\005\000\007\000\005\000\003\000\003\000\005\000\
\003\000\021\000\028\000\022\000\026\000\029\000\019\000\030\000\
\000\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\000\006\000\000\000\000\000\000\000\000\000\000\000\
\007\000\008\000"

let yycheck = "\006\000\
\000\000\001\001\001\000\002\001\003\001\001\001\005\001\001\001\
\006\001\009\001\010\001\008\001\002\001\003\001\010\001\005\001\
\016\001\017\001\008\001\026\000\016\001\017\001\016\001\017\001\
\002\001\003\001\004\001\005\001\006\001\004\001\008\001\002\001\
\003\001\004\001\005\001\006\001\003\000\008\001\002\001\003\001\
\004\001\005\001\002\001\003\001\008\001\002\001\003\001\004\001\
\005\001\002\001\003\001\008\001\005\001\002\001\003\001\008\001\
\005\001\003\001\021\000\005\001\007\001\023\000\005\000\024\000\
\255\255\025\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001"

let yynames_const = "\
  LP\000\
  RP\000\
  PLUS\000\
  MUL\000\
  EOL\000\
  EOF\000\
  DIV\000\
  MOD\000\
  SUB\000\
  ABS\000\
  NEG\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NOT\000\
  "

let yynames_block = "\
  INT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'add_expression) in
    Obj.repr(
# 14 "parser.mly"
                                       ( _1 )
# 194 "parser.ml"
               : Expression.expr_tree))
; (fun __caml_parser_env ->
    Obj.repr(
# 15 "parser.mly"
                                       ( NULL )
# 200 "parser.ml"
               : Expression.expr_tree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expression) in
    Obj.repr(
# 22 "parser.mly"
                                       ( PLUS(_1,_3) )
# 208 "parser.ml"
               : 'add_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expression) in
    Obj.repr(
# 23 "parser.mly"
                                      ( _1 )
# 215 "parser.ml"
               : 'add_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'sub_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expression) in
    Obj.repr(
# 27 "parser.mly"
                                       ( SUB(_1,_3) )
# 223 "parser.ml"
               : 'sub_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expression) in
    Obj.repr(
# 28 "parser.mly"
                                       ( _1 )
# 230 "parser.ml"
               : 'sub_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'div_expression) in
    Obj.repr(
# 32 "parser.mly"
                                            ( INTO(_1,_3) )
# 238 "parser.ml"
               : 'mult_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'div_expression) in
    Obj.repr(
# 33 "parser.mly"
                                             ( _1 )
# 245 "parser.ml"
               : 'mult_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'div_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mod_expression) in
    Obj.repr(
# 37 "parser.mly"
                                           ( DIV(_1,_3) )
# 253 "parser.ml"
               : 'div_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mod_expression) in
    Obj.repr(
# 38 "parser.mly"
                                            ( _1 )
# 260 "parser.ml"
               : 'div_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 42 "parser.mly"
                                        ( MOD(_1,_3) )
# 268 "parser.ml"
               : 'mod_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expression) in
    Obj.repr(
# 43 "parser.mly"
                                            ( _1 )
# 275 "parser.ml"
               : 'mod_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'neg_expression) in
    Obj.repr(
# 47 "parser.mly"
                                        ( ABS(_2) )
# 282 "parser.ml"
               : 'abs_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neg_expression) in
    Obj.repr(
# 48 "parser.mly"
                                           ( _1 )
# 289 "parser.ml"
               : 'abs_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 52 "parser.mly"
                                         ( NEG(_2) )
# 296 "parser.ml"
               : 'neg_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 53 "parser.mly"
                                           ( _1 )
# 303 "parser.ml"
               : 'neg_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 57 "parser.mly"
                                       ( VAR(_1) )
# 310 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 58 "parser.mly"
                                       ( NUM(_1) )
# 317 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'add_expression) in
    Obj.repr(
# 59 "parser.mly"
                                       ( ARITH_PARENTHESIS(_2)     )
# 324 "parser.ml"
               : 'constant))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Expression.expr_tree)
