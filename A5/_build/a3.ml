type token =
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)
  | ABS
  | TILDA
  | NOT
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | REM
  | CONJ
  | DISJ
  | EQ
  | GT
  | LT
  | LP
  | RP
  | IF
  | THEN
  | ELSE
  | FI
  | COMMA
  | PROJ
  | LET
  | IN
  | END
  | BACKSLASH
  | DOT
  | DEF
  | SEMICOLON
  | COLON
  | TINT
  | TBOOL
  | TUNIT
  | PARALLEL
  | LOCAL
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "a3.mly"
    open A1
# 46 "a3.ml"
let yytransl_const = [|
  260 (* ABS *);
  261 (* TILDA *);
  262 (* NOT *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIV *);
  267 (* REM *);
  268 (* CONJ *);
  269 (* DISJ *);
  270 (* EQ *);
  271 (* GT *);
  272 (* LT *);
  273 (* LP *);
  274 (* RP *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  278 (* FI *);
  279 (* COMMA *);
  280 (* PROJ *);
  281 (* LET *);
  282 (* IN *);
  283 (* END *);
  284 (* BACKSLASH *);
  285 (* DOT *);
  286 (* DEF *);
  287 (* SEMICOLON *);
  288 (* COLON *);
  289 (* TINT *);
  290 (* TBOOL *);
  291 (* TUNIT *);
  292 (* PARALLEL *);
  293 (* LOCAL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\004\000\004\000\004\000\005\000\005\000\005\000\006\000\
\006\000\006\000\007\000\007\000\008\000\003\000\003\000\010\000\
\010\000\012\000\012\000\011\000\011\000\011\000\011\000\011\000\
\002\000\009\000\009\000\013\000\013\000\014\000\014\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\016\000\
\016\000\016\000\017\000\017\000\018\000\018\000\018\000\019\000\
\019\000\020\000\020\000\021\000\021\000\022\000\022\000\023\000\
\023\000\023\000\024\000\024\000\025\000\025\000\026\000\026\000\
\027\000\027\000\028\000\028\000\028\000\028\000\000\000\000\000\
\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\005\000\001\000\006\000\001\000\001\000\004\000\
\004\000\003\000\003\000\001\000\001\000\001\000\003\000\003\000\
\002\000\003\000\001\000\003\000\001\000\002\000\001\000\003\000\
\003\000\003\000\004\000\004\000\004\000\004\000\001\000\003\000\
\003\000\001\000\003\000\001\000\003\000\003\000\001\000\002\000\
\001\000\002\000\001\000\007\000\001\000\007\000\001\000\002\000\
\003\000\001\000\003\000\003\000\004\000\001\000\006\000\001\000\
\005\000\001\000\001\000\001\000\001\000\003\000\002\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\071\000\000\000\
\000\000\000\000\000\000\012\000\068\000\069\000\067\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\072\000\
\000\000\000\000\029\000\000\000\000\000\000\000\000\000\047\000\
\049\000\051\000\053\000\055\000\058\000\000\000\064\000\066\000\
\000\000\022\000\020\000\021\000\073\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\050\000\000\000\056\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\025\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\006\000\009\000\
\005\000\010\000\007\000\070\000\000\000\057\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\046\000\000\000\024\000\000\000\000\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\061\000\018\000\019\000\016\000\
\017\000\000\000\011\000\000\000\000\000\065\000\000\000\000\000\
\000\000\000\000\000\000\063\000\052\000\054\000\000\000"

let yydgoto = "\004\000\
\007\000\024\000\045\000\008\000\009\000\010\000\011\000\012\000\
\025\000\046\000\047\000\081\000\026\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\062\000\
\037\000\038\000\039\000\040\000"

let yysindex = "\136\000\
\026\255\117\255\253\254\000\000\000\255\026\255\000\000\009\000\
\035\255\044\255\071\255\000\000\000\000\000\000\000\000\218\255\
\218\255\208\255\017\255\117\255\040\255\026\255\022\255\000\000\
\007\000\055\255\000\000\140\255\043\255\059\255\064\255\000\000\
\000\000\000\000\000\000\000\000\000\000\060\255\000\000\000\000\
\253\254\000\000\000\000\000\000\000\000\075\255\093\255\077\255\
\086\255\000\000\026\255\026\255\026\255\026\255\026\255\026\255\
\000\000\000\000\140\255\000\000\046\255\092\255\052\255\128\255\
\105\255\103\255\117\255\000\000\117\255\089\255\145\255\180\255\
\208\255\208\255\208\255\208\255\208\255\185\001\008\255\135\255\
\019\255\125\255\148\255\253\254\026\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\117\255\000\000\117\255\117\255\
\142\255\117\255\253\254\055\255\000\000\208\255\208\255\043\255\
\208\255\043\255\208\255\043\255\059\255\059\255\064\255\000\000\
\000\000\149\255\000\000\253\254\253\254\000\000\253\254\253\254\
\152\255\141\255\158\255\158\255\039\255\171\255\020\255\146\255\
\043\255\043\255\043\255\043\255\000\000\000\000\000\000\000\000\
\000\000\117\255\000\000\117\255\156\255\000\000\037\255\158\255\
\036\255\185\001\117\255\000\000\000\000\000\000\098\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\055\000\061\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\147\001\000\000\097\001\153\000\078\000\027\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\004\000\015\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\122\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\172\001\000\000\000\000\000\000\178\000\
\000\000\203\000\000\000\228\000\103\000\128\000\053\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\107\255\109\255\000\000\000\000\000\000\000\000\
\253\000\025\001\051\001\077\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\076\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\174\255\002\000\000\000\000\000\044\000\000\000\
\242\255\135\000\225\255\000\000\110\000\111\000\161\000\197\255\
\084\000\112\000\075\000\144\000\178\255\000\000\000\000\000\000\
\000\000\000\000\043\000\000\000"

let yytablesize = 725
let yytable = "\114\000\
\062\000\121\000\048\000\014\000\061\000\063\000\068\000\049\000\
\050\000\080\000\104\000\106\000\108\000\041\000\015\000\082\000\
\128\000\013\000\014\000\015\000\016\000\017\000\018\000\065\000\
\066\000\115\000\044\000\117\000\002\000\042\000\043\000\044\000\
\067\000\019\000\060\000\020\000\118\000\013\000\014\000\015\000\
\021\000\022\000\129\000\130\000\023\000\131\000\142\000\132\000\
\067\000\073\000\074\000\067\000\043\000\147\000\003\000\005\000\
\064\000\149\000\067\000\140\000\004\000\022\000\006\000\092\000\
\067\000\051\000\069\000\150\000\093\000\075\000\052\000\096\000\
\076\000\077\000\053\000\013\000\078\000\042\000\123\000\054\000\
\124\000\125\000\082\000\127\000\134\000\135\000\122\000\136\000\
\137\000\013\000\014\000\015\000\016\000\017\000\086\000\087\000\
\088\000\089\000\090\000\091\000\083\000\055\000\041\000\102\000\
\103\000\019\000\056\000\020\000\084\000\094\000\067\000\085\000\
\021\000\022\000\095\000\092\000\023\000\013\000\014\000\015\000\
\016\000\017\000\018\000\144\000\059\000\145\000\060\000\040\000\
\097\000\059\000\098\000\060\000\151\000\019\000\099\000\020\000\
\001\000\002\000\003\000\119\000\021\000\022\000\083\000\116\000\
\023\000\013\000\014\000\015\000\016\000\017\000\112\000\113\000\
\039\000\070\000\071\000\072\000\109\000\110\000\105\000\057\000\
\058\000\019\000\120\000\020\000\126\000\138\000\133\000\139\000\
\021\000\022\000\067\000\141\000\023\000\146\000\143\000\079\000\
\100\000\032\000\059\000\101\000\013\000\014\000\015\000\016\000\
\017\000\148\000\111\000\000\000\000\000\000\000\000\000\000\000\
\000\000\107\000\000\000\000\000\019\000\000\000\020\000\000\000\
\000\000\000\000\034\000\021\000\022\000\000\000\000\000\023\000\
\013\000\014\000\015\000\016\000\017\000\000\000\000\000\000\000\
\000\000\000\000\013\000\014\000\015\000\000\000\017\000\000\000\
\019\000\000\000\020\000\033\000\000\000\000\000\000\000\021\000\
\022\000\000\000\019\000\023\000\020\000\000\000\000\000\000\000\
\000\000\021\000\022\000\000\000\000\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\014\000\062\000\067\000\062\000\062\000\062\000\062\000\
\036\000\000\000\062\000\062\000\015\000\000\000\000\000\062\000\
\014\000\044\000\044\000\000\000\062\000\044\000\044\000\044\000\
\044\000\044\000\044\000\015\000\044\000\000\000\044\000\044\000\
\044\000\044\000\037\000\000\000\044\000\044\000\002\000\002\000\
\000\000\044\000\000\000\043\000\043\000\000\000\044\000\043\000\
\043\000\043\000\043\000\043\000\043\000\000\000\043\000\000\000\
\043\000\043\000\043\000\043\000\035\000\000\000\043\000\043\000\
\003\000\003\000\000\000\043\000\042\000\042\000\004\000\004\000\
\043\000\042\000\042\000\042\000\042\000\042\000\000\000\042\000\
\031\000\042\000\042\000\042\000\042\000\013\000\013\000\042\000\
\042\000\000\000\013\000\000\000\042\000\041\000\041\000\013\000\
\000\000\042\000\041\000\041\000\041\000\041\000\041\000\000\000\
\041\000\030\000\041\000\041\000\041\000\041\000\000\000\000\000\
\041\000\041\000\000\000\000\000\000\000\041\000\040\000\040\000\
\000\000\000\000\041\000\040\000\040\000\040\000\040\000\040\000\
\000\000\040\000\027\000\040\000\040\000\040\000\040\000\000\000\
\000\000\040\000\040\000\000\000\000\000\000\000\040\000\000\000\
\000\000\000\000\000\000\040\000\039\000\039\000\039\000\039\000\
\039\000\000\000\039\000\026\000\039\000\039\000\039\000\039\000\
\000\000\000\000\039\000\039\000\000\000\000\000\000\000\039\000\
\000\000\000\000\000\000\000\000\039\000\032\000\032\000\032\000\
\032\000\032\000\000\000\032\000\000\000\032\000\032\000\032\000\
\032\000\000\000\000\000\032\000\032\000\000\000\000\000\000\000\
\032\000\000\000\000\000\000\000\000\000\032\000\034\000\034\000\
\034\000\034\000\034\000\000\000\034\000\000\000\034\000\034\000\
\034\000\034\000\000\000\000\000\034\000\034\000\000\000\000\000\
\000\000\034\000\000\000\000\000\000\000\000\000\034\000\033\000\
\033\000\033\000\033\000\033\000\000\000\033\000\000\000\033\000\
\033\000\033\000\033\000\000\000\000\000\033\000\033\000\000\000\
\000\000\000\000\033\000\000\000\000\000\000\000\000\000\033\000\
\038\000\038\000\038\000\038\000\038\000\000\000\038\000\000\000\
\038\000\038\000\038\000\038\000\000\000\000\000\038\000\038\000\
\000\000\000\000\000\000\038\000\000\000\000\000\000\000\000\000\
\038\000\000\000\000\000\000\000\036\000\036\000\036\000\036\000\
\036\000\000\000\036\000\000\000\036\000\036\000\036\000\036\000\
\000\000\000\000\036\000\036\000\000\000\000\000\000\000\036\000\
\000\000\000\000\000\000\000\000\036\000\000\000\037\000\037\000\
\037\000\037\000\037\000\000\000\037\000\000\000\037\000\037\000\
\037\000\037\000\000\000\000\000\037\000\037\000\000\000\000\000\
\000\000\037\000\000\000\000\000\000\000\000\000\037\000\000\000\
\035\000\035\000\035\000\035\000\035\000\000\000\035\000\000\000\
\035\000\035\000\035\000\035\000\000\000\000\000\035\000\035\000\
\000\000\000\000\000\000\035\000\031\000\031\000\000\000\000\000\
\035\000\000\000\031\000\000\000\031\000\031\000\031\000\031\000\
\000\000\000\000\031\000\031\000\000\000\000\000\000\000\031\000\
\000\000\000\000\000\000\000\000\031\000\030\000\030\000\000\000\
\000\000\000\000\000\000\030\000\000\000\030\000\030\000\030\000\
\030\000\000\000\000\000\030\000\030\000\000\000\000\000\000\000\
\030\000\000\000\000\000\000\000\000\000\030\000\000\000\027\000\
\000\000\000\000\000\000\000\000\027\000\000\000\027\000\027\000\
\027\000\027\000\000\000\000\000\027\000\027\000\000\000\000\000\
\000\000\027\000\000\000\000\000\000\000\000\000\027\000\000\000\
\026\000\013\000\014\000\015\000\000\000\026\000\000\000\026\000\
\026\000\026\000\026\000\000\000\000\000\026\000\026\000\000\000\
\000\000\019\000\026\000\020\000\000\000\000\000\000\000\026\000\
\021\000\022\000\000\000\000\000\023\000"

let yycheck = "\078\000\
\000\000\084\000\003\001\000\000\019\000\020\000\000\000\006\000\
\000\000\041\000\070\000\071\000\072\000\017\001\000\000\008\001\
\099\000\001\001\002\001\003\001\004\001\005\001\006\001\022\000\
\003\001\018\001\000\000\009\001\000\000\033\001\034\001\035\001\
\013\001\017\001\018\001\019\001\018\001\001\001\002\001\003\001\
\024\001\025\001\102\000\103\000\028\001\105\000\027\001\107\000\
\013\001\007\001\008\001\013\001\000\000\017\001\000\000\030\001\
\017\001\022\001\013\001\021\001\000\000\025\001\037\001\018\001\
\013\001\031\001\012\001\146\000\023\001\011\001\036\001\020\001\
\009\001\010\001\031\001\000\000\017\001\000\000\093\000\036\001\
\095\000\096\000\008\001\098\000\116\000\117\000\085\000\119\000\
\120\000\001\001\002\001\003\001\004\001\005\001\051\000\052\000\
\053\000\054\000\055\000\056\000\008\001\031\001\000\000\015\001\
\016\001\017\001\036\001\019\001\032\001\018\001\013\001\026\001\
\024\001\025\001\023\001\018\001\028\001\001\001\002\001\003\001\
\004\001\005\001\006\001\138\000\018\001\140\000\018\001\000\000\
\001\001\023\001\026\001\023\001\147\000\017\001\032\001\019\001\
\001\000\002\000\003\000\015\001\024\001\025\001\008\001\009\001\
\028\001\001\001\002\001\003\001\004\001\005\001\076\000\077\000\
\000\000\014\001\015\001\016\001\073\000\074\000\014\001\016\000\
\017\000\017\001\015\001\019\001\023\001\014\001\018\001\027\001\
\024\001\025\001\013\001\001\001\028\001\018\001\029\001\041\000\
\067\000\000\000\018\000\069\000\001\001\002\001\003\001\004\001\
\005\001\143\000\075\000\255\255\255\255\255\255\255\255\255\255\
\255\255\014\001\255\255\255\255\017\001\255\255\019\001\255\255\
\255\255\255\255\000\000\024\001\025\001\255\255\255\255\028\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\255\255\005\001\255\255\
\017\001\255\255\019\001\000\000\255\255\255\255\255\255\024\001\
\025\001\255\255\017\001\028\001\019\001\255\255\255\255\255\255\
\255\255\024\001\025\001\255\255\255\255\028\001\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\014\001\018\001\013\001\020\001\021\001\022\001\023\001\
\000\000\255\255\026\001\027\001\014\001\255\255\255\255\031\001\
\029\001\007\001\008\001\255\255\036\001\011\001\012\001\013\001\
\014\001\015\001\016\001\029\001\018\001\255\255\020\001\021\001\
\022\001\023\001\000\000\255\255\026\001\027\001\026\001\027\001\
\255\255\031\001\255\255\007\001\008\001\255\255\036\001\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\255\255\
\020\001\021\001\022\001\023\001\000\000\255\255\026\001\027\001\
\026\001\027\001\255\255\031\001\007\001\008\001\026\001\027\001\
\036\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\000\000\020\001\021\001\022\001\023\001\026\001\027\001\026\001\
\027\001\255\255\031\001\255\255\031\001\007\001\008\001\036\001\
\255\255\036\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\000\000\020\001\021\001\022\001\023\001\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\031\001\007\001\008\001\
\255\255\255\255\036\001\012\001\013\001\014\001\015\001\016\001\
\255\255\018\001\000\000\020\001\021\001\022\001\023\001\255\255\
\255\255\026\001\027\001\255\255\255\255\255\255\031\001\255\255\
\255\255\255\255\255\255\036\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\000\000\020\001\021\001\022\001\023\001\
\255\255\255\255\026\001\027\001\255\255\255\255\255\255\031\001\
\255\255\255\255\255\255\255\255\036\001\012\001\013\001\014\001\
\015\001\016\001\255\255\018\001\255\255\020\001\021\001\022\001\
\023\001\255\255\255\255\026\001\027\001\255\255\255\255\255\255\
\031\001\255\255\255\255\255\255\255\255\036\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\031\001\255\255\255\255\255\255\255\255\036\001\012\001\
\013\001\014\001\015\001\016\001\255\255\018\001\255\255\020\001\
\021\001\022\001\023\001\255\255\255\255\026\001\027\001\255\255\
\255\255\255\255\031\001\255\255\255\255\255\255\255\255\036\001\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\255\255\
\020\001\021\001\022\001\023\001\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\031\001\255\255\255\255\255\255\255\255\
\036\001\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\255\255\020\001\021\001\022\001\023\001\
\255\255\255\255\026\001\027\001\255\255\255\255\255\255\031\001\
\255\255\255\255\255\255\255\255\036\001\255\255\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\031\001\255\255\255\255\255\255\255\255\036\001\255\255\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\255\255\
\020\001\021\001\022\001\023\001\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\031\001\012\001\013\001\255\255\255\255\
\036\001\255\255\018\001\255\255\020\001\021\001\022\001\023\001\
\255\255\255\255\026\001\027\001\255\255\255\255\255\255\031\001\
\255\255\255\255\255\255\255\255\036\001\012\001\013\001\255\255\
\255\255\255\255\255\255\018\001\255\255\020\001\021\001\022\001\
\023\001\255\255\255\255\026\001\027\001\255\255\255\255\255\255\
\031\001\255\255\255\255\255\255\255\255\036\001\255\255\013\001\
\255\255\255\255\255\255\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\031\001\255\255\255\255\255\255\255\255\036\001\255\255\
\013\001\001\001\002\001\003\001\255\255\018\001\255\255\020\001\
\021\001\022\001\023\001\255\255\255\255\026\001\027\001\255\255\
\255\255\017\001\031\001\019\001\255\255\255\255\255\255\036\001\
\024\001\025\001\255\255\255\255\028\001"

let yynames_const = "\
  ABS\000\
  TILDA\000\
  NOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  REM\000\
  CONJ\000\
  DISJ\000\
  EQ\000\
  GT\000\
  LT\000\
  LP\000\
  RP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  COMMA\000\
  PROJ\000\
  LET\000\
  IN\000\
  END\000\
  BACKSLASH\000\
  DOT\000\
  DEF\000\
  SEMICOLON\000\
  COLON\000\
  TINT\000\
  TBOOL\000\
  TUNIT\000\
  PARALLEL\000\
  LOCAL\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'def_parser_temp) in
    Obj.repr(
# 36 "a3.mly"
                              (_1)
# 428 "a3.ml"
               : A1.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parallel_list) in
    Obj.repr(
# 40 "a3.mly"
                                   (Parallel(_1))
# 435 "a3.ml"
               : 'def_parser_temp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'seq_list) in
    Obj.repr(
# 41 "a3.mly"
                                   (Sequence(_1))
# 442 "a3.ml"
               : 'def_parser_temp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'local_def) in
    Obj.repr(
# 42 "a3.mly"
                                   ( _1 )
# 449 "a3.ml"
               : 'def_parser_temp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'seq_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'local_def) in
    Obj.repr(
# 46 "a3.mly"
                                         ( [Sequence(_1)]@[_3])
# 457 "a3.ml"
               : 'parallel_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'parallel_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'local_def) in
    Obj.repr(
# 47 "a3.mly"
                                         ( _1@[_3] )
# 465 "a3.ml"
               : 'parallel_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'local_def) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'local_def) in
    Obj.repr(
# 48 "a3.mly"
                                         ( _1::[_3])
# 473 "a3.ml"
               : 'parallel_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'parallel_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'local_def) in
    Obj.repr(
# 52 "a3.mly"
                                               ( [Parallel(_1)]@[_3])
# 481 "a3.ml"
               : 'seq_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'seq_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'local_def) in
    Obj.repr(
# 53 "a3.mly"
                                              ( _1@[_3] )
# 489 "a3.ml"
               : 'seq_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'local_def) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'local_def) in
    Obj.repr(
# 54 "a3.mly"
                                               ( _1::[_3])
# 497 "a3.ml"
               : 'seq_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'def_parser_temp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'def_parser_temp) in
    Obj.repr(
# 58 "a3.mly"
                                                  (Local(_2,_4))
# 505 "a3.ml"
               : 'local_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_def) in
    Obj.repr(
# 59 "a3.mly"
                                        ( _1 )
# 512 "a3.ml"
               : 'local_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : A1.exptype) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'disj_expression) in
    Obj.repr(
# 63 "a3.mly"
                                                               (Simple(_2,_4,_6))
# 521 "a3.ml"
               : 'simple_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_type_parser) in
    Obj.repr(
# 70 "a3.mly"
                                                             (_1)
# 528 "a3.ml"
               : A1.exptype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'base_type_parser) in
    Obj.repr(
# 71 "a3.mly"
                                                             (_1)
# 535 "a3.ml"
               : A1.exptype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'func_type_parser) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'base_type_parser) in
    Obj.repr(
# 75 "a3.mly"
                                                             (Tfunc(_1,_4))
# 543 "a3.ml"
               : 'func_type_parser))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'base_type_parser) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'base_type_parser) in
    Obj.repr(
# 76 "a3.mly"
                                                             (Tfunc(_1,_4))
# 551 "a3.ml"
               : 'func_type_parser))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'base_type_parser) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'base_type_parser) in
    Obj.repr(
# 80 "a3.mly"
                                                             ([_1]@[_3])
# 559 "a3.ml"
               : 'typevar_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typevar_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'base_type_parser) in
    Obj.repr(
# 81 "a3.mly"
                                                             (_1@[_3])
# 567 "a3.ml"
               : 'typevar_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "a3.mly"
                                                    (Tbool)
# 573 "a3.ml"
               : 'base_type_parser))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "a3.mly"
                                                    (Tunit)
# 579 "a3.ml"
               : 'base_type_parser))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "a3.mly"
                                                    (Tint)
# 585 "a3.ml"
               : 'base_type_parser))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typevar_list) in
    Obj.repr(
# 88 "a3.mly"
                                                    (Ttuple(_2))
# 592 "a3.ml"
               : 'base_type_parser))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'func_type_parser) in
    Obj.repr(
# 89 "a3.mly"
                                                    (_2)
# 599 "a3.ml"
               : 'base_type_parser))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'disj_expression) in
    Obj.repr(
# 95 "a3.mly"
                                                 ( _1 )
# 606 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'disj_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conj_expression) in
    Obj.repr(
# 99 "a3.mly"
                                                 ( Disjunction(_1,_3) )
# 614 "a3.ml"
               : 'disj_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conj_expression) in
    Obj.repr(
# 100 "a3.mly"
                                                 ( _1 )
# 621 "a3.ml"
               : 'disj_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'conj_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'not_expression) in
    Obj.repr(
# 104 "a3.mly"
                                               ( Conjunction(_1,_3) )
# 629 "a3.ml"
               : 'conj_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'not_expression) in
    Obj.repr(
# 105 "a3.mly"
                                               ( _1 )
# 636 "a3.ml"
               : 'conj_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'compare_expression) in
    Obj.repr(
# 110 "a3.mly"
                                                   ( Not(_2))
# 643 "a3.ml"
               : 'not_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compare_expression) in
    Obj.repr(
# 111 "a3.mly"
                                                   ( _1 )
# 650 "a3.ml"
               : 'not_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'compare_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'minus_expression) in
    Obj.repr(
# 115 "a3.mly"
                                                    ( Equals(_1,_3))
# 658 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'compare_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'minus_expression) in
    Obj.repr(
# 116 "a3.mly"
                                                    ( LessT(_1,_3) )
# 666 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'compare_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'minus_expression) in
    Obj.repr(
# 117 "a3.mly"
                                                    ( GreaterT(_1,_3))
# 674 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'compare_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'minus_expression) in
    Obj.repr(
# 118 "a3.mly"
                                                    ( LessTE(_1,_4))
# 682 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'compare_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'minus_expression) in
    Obj.repr(
# 119 "a3.mly"
                                                    ( LessTE(_1,_4))
# 690 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'compare_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'minus_expression) in
    Obj.repr(
# 120 "a3.mly"
                                                    ( GreaterTE(_1,_4))
# 698 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'compare_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'minus_expression) in
    Obj.repr(
# 121 "a3.mly"
                                                    ( GreaterTE(_1,_4))
# 706 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'minus_expression) in
    Obj.repr(
# 122 "a3.mly"
                                                    ( _1 )
# 713 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'minus_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expression) in
    Obj.repr(
# 126 "a3.mly"
                                                ( Sub(_1,_3) )
# 721 "a3.ml"
               : 'minus_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'minus_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expression) in
    Obj.repr(
# 127 "a3.mly"
                                                ( Add(_1,_3) )
# 729 "a3.ml"
               : 'minus_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expression) in
    Obj.repr(
# 128 "a3.mly"
                                                ( _1 )
# 736 "a3.ml"
               : 'minus_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rem_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expression) in
    Obj.repr(
# 132 "a3.mly"
                                               ( Rem(_1,_3) )
# 744 "a3.ml"
               : 'rem_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expression) in
    Obj.repr(
# 133 "a3.mly"
                                                 ( _1 )
# 751 "a3.ml"
               : 'rem_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expression) in
    Obj.repr(
# 137 "a3.mly"
                                                ( Mult(_1,_3) )
# 759 "a3.ml"
               : 'mult_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expression) in
    Obj.repr(
# 138 "a3.mly"
                                                ( Div(_1,_3)  )
# 767 "a3.ml"
               : 'mult_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expression) in
    Obj.repr(
# 139 "a3.mly"
                                                ( _1 )
# 774 "a3.ml"
               : 'mult_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'neg_expression) in
    Obj.repr(
# 143 "a3.mly"
                                                ( Abs(_2))
# 781 "a3.ml"
               : 'abs_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neg_expression) in
    Obj.repr(
# 144 "a3.mly"
                                                ( _1 )
# 788 "a3.ml"
               : 'abs_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'neg_expression) in
    Obj.repr(
# 148 "a3.mly"
                                               ( Negative(_2))
# 795 "a3.ml"
               : 'neg_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expression) in
    Obj.repr(
# 149 "a3.mly"
                                               ( _1 )
# 802 "a3.ml"
               : 'neg_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'disj_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'disj_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'disj_expression) in
    Obj.repr(
# 153 "a3.mly"
                                                                                ( IfThenElse(_2,_4,_6))
# 811 "a3.ml"
               : 'ifte_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proj_expression) in
    Obj.repr(
# 154 "a3.mly"
                                               ( _1 )
# 818 "a3.ml"
               : 'ifte_expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expression) in
    Obj.repr(
# 158 "a3.mly"
                                               ( Project((_3,_5) , _7) )
# 827 "a3.ml"
               : 'proj_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_expression) in
    Obj.repr(
# 159 "a3.mly"
                                                ( _1 )
# 834 "a3.ml"
               : 'proj_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "a3.mly"
                                                (Tuple(0,[]))
# 840 "a3.ml"
               : 'tuple_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comma_expression) in
    Obj.repr(
# 164 "a3.mly"
                                                (Tuple(List.length (_2),_2))
# 847 "a3.ml"
               : 'tuple_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'f_call_expression) in
    Obj.repr(
# 165 "a3.mly"
                                                ( _1 )
# 854 "a3.ml"
               : 'tuple_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'disj_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'disj_expression) in
    Obj.repr(
# 169 "a3.mly"
                                                                      (_1::[_3])
# 862 "a3.ml"
               : 'comma_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comma_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'disj_expression) in
    Obj.repr(
# 170 "a3.mly"
                                                               (_1@[_3])
# 870 "a3.ml"
               : 'comma_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'f_abstract_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ifte_expression) in
    Obj.repr(
# 174 "a3.mly"
                                                              (FunctionCall(_1,_3))
# 878 "a3.ml"
               : 'f_call_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'f_abstract_expression) in
    Obj.repr(
# 175 "a3.mly"
                                                            (_1)
# 885 "a3.ml"
               : 'f_call_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : A1.exptype) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'let_expression) in
    Obj.repr(
# 179 "a3.mly"
                                                                       (FunctionAbstraction(_2,_4,_6))
# 894 "a3.ml"
               : 'f_abstract_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_expression) in
    Obj.repr(
# 180 "a3.mly"
                                                            (_1)
# 901 "a3.ml"
               : 'f_abstract_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'def_parser_temp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'disj_expression) in
    Obj.repr(
# 184 "a3.mly"
                                                            (Let(_2,_4))
# 909 "a3.ml"
               : 'let_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 185 "a3.mly"
                                                            (_1)
# 916 "a3.ml"
               : 'let_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 189 "a3.mly"
                                                ( Var(_1) )
# 923 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 190 "a3.mly"
                                                ( N(_1) )
# 930 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 191 "a3.mly"
                                                ( B(_1))
# 937 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'disj_expression) in
    Obj.repr(
# 192 "a3.mly"
                                                ( InParen(_2) )
# 944 "a3.ml"
               : 'constant))
(* Entry def_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry exp_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry type_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let def_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : A1.definition)
let exp_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : A1.exptree)
let type_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : A1.exptype)
